/*Write a program (using fork() and/or exec() commands) where parent and child execute:
a) same program, same code.
b) same program, different code.
c) before terminating, the parent waits for the child to finish its task.*/

a)
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
int main()
{
int a;
a=fork();
if(a<0)
{
printf("Child Process could not be Created");
exit(-1);
}
else //Child Process Created Successfully
{
printf("My ID is:%d,My Parent ID is:%d\n",getpid(),getppid());
}
return 0;
}

b)
#include<stdlib.h>
#include<unistd.h>
int main()
{
int a;
a=fork();
if(a<0)
{
printf("Child Process could not be Created");
exit(-1);
}
else if(a==0) //In Child Process
{
execl("/bin/ls","ls\n",NULL);
}
else //Parent Process
{
printf("\nIn Parent Process\n");
}
return 0;
}

c)
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
int main()
{
int a;
a=fork();
if(a<0)
{
printf("Child Process could not be Created");
exit(-1);
}
else if(a==0) //In Child Process
{
printf("\nIn Child Process\n");
}
else //Parent Process
{
wait(NULL);
printf("\nIn Parent Process\n");
}
return 0;
}
